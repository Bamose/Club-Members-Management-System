generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  username      String
  password      String
  email         String       @unique
  role          String
  department_id Int          @unique
  department    Department?  @relation(fields: [department_id], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  member        Member?      @relation(fields: [id], references: [user_id], onDelete: Cascade)
  tokens        Token[]
  roleAccess    RoleAccess[]
}

model Token {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  type       String // SMS|API
  emailToken String? @unique

  valid      Boolean  @default(true)
  expiration DateTime

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Member {
  member_id    Int            @id @default(autoincrement())
  user_id      Int            @unique
  first_name   String
  last_name    String
  email        String
  phone_number String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User?
  member_area  MemberArea?
  attendances  Registration[]
}

model Department {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model MemberArea {
  member_area_id    Int      @id @default(autoincrement())
  member_id         Int      @unique
  personalized_info String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  member            Member?  @relation(fields: [member_id], references: [user_id], onDelete: Cascade)
}

model RoleAccess {
  role_access_id Int      @id @default(autoincrement())
  user_id        Int
  access_level   String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Event {
  event_id      Int            @id @default(autoincrement())
  event_name    String
  description   String
  date          DateTime
  location      String
  organisedby   String
  registrations Registration[]
}

model Registration {
  registration_id     Int      @id @default(autoincrement())
  event_id            Int
  member_id           Int
  registration_status String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  event               Event    @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  member              Member   @relation(fields: [member_id], references: [user_id], onDelete: Cascade)
}
